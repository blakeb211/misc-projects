" VIM Configuration File
" Author: Blake Baird
"
" set UTF-8 encoding
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
" disable vi compatibilit (emulation of old bugs)
set nocompatible
" use indentation of previous line
set autoindent
set smartindent
set guifont=Consolas:h10.5:cANSI:qDRAFT
set autochdir
set noerrorbells visualbell
" don't force save of buffer, just hide it
set hidden
" turn spellcheck off
set nospell
" Mouse stuff
set mousefocus
set mousemodel=extend
set mousehide
set number
" let path be this dir and any below it
set path=.,**
" Status Bar Stuff
set laststatus=2
set statusline=
set statusline+=\ %F
set statusline+=\ %p%%
set statusline+=\ %l:%c
set cursorline
" remove toolbar
set guioptions-=T
" remove righthand scrollbar
set guioptions-=r
let &grepprg='findstr /N /P /L'

packloadall
silent! helptags ALL
call plug#begin('$VIM/plugged')
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'fatih/vim-go', { 'tag': '*' }
call plug#end()


" use intelligent indentation for C
" configure tabwidth and insert spaces instead of tabs
set tabstop=4        " tab width is 4 spaces
set bs=2
set shiftwidth=4     " indent also with 4 spaces
set wildmenu
set nohlsearch
set undofile

"switch semicolon for colon
nmap ; ;
nmap <C-Right> :bn<CR>
noremap <C-Left> :bp<CR>
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>
nnoremap <leader>b  :!build.bat<CR>
nnoremap <leader>t  :vert term<CR>
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>d  <Plug>(go-diagnostics)
nnoremap <leader>i  :GoImports<CR>
nnoremap - :e %:h<CR>
" https://vim.fandom.com/wiki/Map_semicolon_to_colon
map ; :
filetype plugin indent on
" wrap lines at 120 chars. 80 is somewaht antiquated with nowadays displays.
set textwidth=120
" turn syntax highlighting on
set t_Co=256
syntax on
colorscheme darkzen
"colorscheme nofrils-dark
" turn relative line numbers on
" set number
" highlight matching braces
set showmatch
" intelligent comments
set comments=sl:/*,mb:\ *,elx:\ */
" Install OmniCppComplete like described on http://vim.wikia.com/wiki/C++_code_completion
" This offers intelligent C++ completion when typing ‘.’ ‘->’ or <C-o>
" Load standard tag files
"set tags+=~/.vim/tags/cpp
"set tags+=~/.vim/tags/gl
"set tags+=~/.vim/tags/sdl

" Enhanced keyboard mappings
"
" in normal mode F2 will save the file
nmap <F2> :w<CR>
" in insert mode F2 will exit insert, save, enters insert again
imap <F2> <ESC>:w<CR>i
" edit vimrc file
map <F3> :e $VIM\vimrc<CR>

nnoremap <F11> :lcd %:p:h<CR>
nnoremap <F12> :buffers<CR>:buffer<Space>

"********************************************
"     C++ SETTINGS
"********************************************
" switch between header/source with F4
map <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
" recreate tags file with F5
map <F5> :!ctags -R –c++-kinds=+p –fields=+iaS –extra=+q .<CR>
" source compile script in current directory
" map <F8> :source %:p:h\compile.vim<CR> 
" build project using build.bat 
map <F9> :!msbuild /m c:\cprojects\gl0<CR> 
" run with F10
map <F10> :!c:\cprojects\gl0\x64\Debug\gl0.exe<CR>
" goto definition with F12
"map <F11> :!%.exe<CR>
"map <F12> <C-]>

" MAPPINGS
"


